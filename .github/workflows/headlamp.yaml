name: Headlamp plugin linting, type checking, and testing

on:
  push:
    branches: bugfix/CI
  pull_request:
    branches: bugfix/CI

env:
  HEADLAMP_PLUGIN_VERSION: latest

jobs:
  find_plugin_dirs:
    runs-on: ubuntu-latest
    outputs:
      dirs: ${{ steps.dirs.outputs.dirs }}
    steps:
      - uses: actions/checkout@v3
      - id: dirs
        run: |
          echo "dirs=$(grep -m1 -lR @kinvolk/headlamp-plugin ./*/package.json | xargs -n1 dirname | jq --raw-input --slurp --compact-output 'split(\"\n\")[:-1]')" >> $GITHUB_OUTPUT

  build:
    needs: find_plugin_dirs
    runs-on: ubuntu-latest
    permissions:
      contents: write

    defaults:
      run:
        working-directory: ./

    strategy:
      matrix:
        node-version: [18.x]
        dir: ${{ fromJson(needs.find_plugin_dirs.outputs.dirs) }}

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Ensure vite.config.mjs exists
        run: |
          CONFIG=${{ matrix.dir }}/node_modules/@kinvolk/headlamp-plugin/config/vite.config.mjs
          if [ ! -f "$CONFIG" ]; then
            echo "vite.config.mjs missing in ${{ matrix.dir }}. Creating default config..."
            mkdir -p "$(dirname "$CONFIG")"
            echo 'export default { test: {} };' > "$CONFIG"
          fi

      - name: Run plugin checks
        run: |
          echo "Checking ${{ matrix.dir }} plugin"
          npx @kinvolk/headlamp-plugin@$HEADLAMP_PLUGIN_VERSION format --check ${{ matrix.dir }}
          npx @kinvolk/headlamp-plugin@$HEADLAMP_PLUGIN_VERSION lint ${{ matrix.dir }}
          npx @kinvolk/headlamp-plugin@$HEADLAMP_PLUGIN_VERSION build ${{ matrix.dir }}
          npx @kinvolk/headlamp-plugin@$HEADLAMP_PLUGIN_VERSION test ${{ matrix.dir }}
          npx @kinvolk/headlamp-plugin@$HEADLAMP_PLUGIN_VERSION tsc ${{ matrix.dir }}
          npx @kinvolk/headlamp-plugin@$HEADLAMP_PLUGIN_VERSION package ${{ matrix.dir }}


  #     - env:
  #         GH_TOKEN: ${{ github.token }}
  #       if: github.ref == 'refs/heads/main'
  #       run: |    
  #         name=$(jq -r .name ${{ matrix.dir }}/package.json)
  #         version=$(jq -r .version ${{ matrix.dir }}/package.json)
  #         tag_name="${name}-${version}"
  #         if ! git rev-parse "$tag_name" >/dev/null 2>&1; then
  #           ls -l ${{ matrix.dir }}/dist
  #           gh release create "$tag_name" ${tag_name}.tar.gz --generate-notes --title "Release $tag_name" --notes "Release $tag_name"
  #         fi
          